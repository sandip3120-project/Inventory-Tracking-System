"""
Django settings for plant_wms project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

def env(key, default=None, cast=str):
    """Helper to read env vars, with optional casting."""
    val = os.getenv(key, default)
    if val is None:
        return None
    try:
        return cast(val)
    except Exception:
        return val

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY", "dev‐fallback‐key‐pls‐override")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DJANGO_DEBUG", "True", cast=lambda v: v.lower() == "true")




# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'warehouse',
    'sslserver',
    'django_crontab',
    'django_apscheduler',
]

MIDDLEWARE = [
    #'warehouse.middleware.DebugCSRFOriginMiddleware',
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]

ROOT_URLCONF = 'plant_wms.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'warehouse.context_processors.site_config',
            ],
        },
    },
]

WSGI_APPLICATION = 'plant_wms.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
#BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static'  # <-- put your company-logo.png in here
]
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Media settings for QR images
MEDIA_ROOT = BASE_DIR/ 'media'
MEDIA_URL  = '/media/'

# Base site URL (used in QR payloads)
SITE_URL = "https://192.168.2.101"


CSRF_TRUSTED_ORIGINS = [
    # your exact ngrok URL:
    #"https://94595d4eae7f.ngrok-free.app",
    "https://192.168.2.101",
    "https://192.168.2.101:443",
    # plus the wildcard if you ever spin up a different ngrok subdomain
    #"https://*.ngrok-free.app",
]
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

ALLOWED_HOSTS = [
    "192.168.2.101",
    "127.0.0.1",
    "localhost",
]
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Primary SMTP (Outlook O365)
EMAIL_BACKEND       = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST          = env("EMAIL_HOST",    "smtp.office365.com")
EMAIL_PORT          = env("EMAIL_PORT",    587, cast=int)
EMAIL_USE_TLS       = True
EMAIL_HOST_USER     = env("EMAIL_USER",    "operations@suprabha.com")
EMAIL_HOST_PASSWORD = env("EMAIL_PASS",    "")

# Fallback (Gmail) – you can swap in code if primary fails
# e.g. wrap send_mail in try/except and reconfigure settings.EMAIL_HOST to Gmail

DEFAULT_FROM_EMAIL  = EMAIL_HOST_USER
SERVER_EMAIL        = EMAIL_HOST_USER

# Who to email when an ERROR at DEBUG=False
ADMINS = [
    ("Ops Team",        "operations@suprabha.com"),
    ("Sandip (backup)", "sandip.sing@iiml.org"),
]

# settings.py

if not DEBUG:
    # force HTTPS
    SECURE_SSL_REDIRECT       = False
    SESSION_COOKIE_SECURE     = True
    CSRF_COOKIE_SECURE        = True

    # HSTS
    SECURE_HSTS_SECONDS        = 60      # start small, then raise to 2592000+
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD      = True

    # Browser XSS protections
    SECURE_BROWSER_XSS_FILTER    = True
    SECURE_CONTENT_TYPE_NOSNIFF  = True

    # Clickjacking
    X_FRAME_OPTIONS              = "DENY"
else:
    SECURE_SSL_REDIRECT = False


#BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
LOGS_DIR = BASE_DIR / "logs"
LOGS_DIR.mkdir(parents=True, exist_ok=True)
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {"format": "[%(asctime)s] %(levelname)s %(name)s: %(message)s"},
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": str(LOGS_DIR / "its.log"),
            "formatter": "verbose",
            "level": "INFO",
        },
        "mail_admins": {
            "class": "django.utils.log.AdminEmailHandler",
            "level": "ERROR",
        },
    },
    "root": {
        "handlers": ["console", "file", "mail_admins"],
        "level": "INFO",
    },
}

# Where to send users after login/logout
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/accounts/login/'

ADMINS = [
  ('Warehouse Admin', 'operations@suprabha.com'),
]

# run our command at 09:00 every day
CRONJOBS = [
  ('0 9 * * *', 'django.core.management.call_command', ['reconcile_roll_counts']),
]


# IP of the BarTender PC you just discovered
BT_HOST            = "192.168.1.42"     
# BarTender REST port
BT_PORT            = 54888               
# Full path to your .btw template
BT_LABEL_TEMPLATE  = r"C:\Bartender\Templates\RollLabel.btw"
# The name of the Windows printer you want to use
BT_DEFAULT_PRINTER = "Zebra_ZT410"